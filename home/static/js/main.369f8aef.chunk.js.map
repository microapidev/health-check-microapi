{"version":3,"sources":["logo.svg","Login.js","services/index.js","NewService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","history","useHistory","useState","emailInput","setEmailInput","onSubmit","event","preventDefault","window","localStorage","email","console","log","push","className","type","onChange","target","value","required","getServices","a","fetch","res","json","allServices","subscribedServices","Set","map","service","name","subscribed","has","addService","url","toSubscribe","method","headers","body","JSON","stringify","ok","Promise","reject","message","subscribe","unsubscribe","NewService","error","setError","loading","setLoading","urlInput","useRef","handleSubmit","to","htmlFor","id","pattern","current","validity","patternMismatch","setCustomValidity","ref","checked","role","aria-hidden","Main","location","showOnlySubscribed","setShowOnlySubscribed","allData","setAllData","subscribeLoading","setSubscribeLoading","useEffect","services","toString","fetchServices","onClick","clear","data","key","status","currentSubscriptionStatus","info","App","exact","path","component","render","state","from","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,oKCuC5BC,EApCD,WACZ,IAAMC,EAAUC,cADE,EAEgBC,mBAAS,IAFzB,mBAEbC,EAFa,KAEDC,EAFC,KAiBlB,OACE,oCACE,0BAAMC,SAXW,SAACC,GACpBA,EAAMC,iBACNC,OAAOC,aAAaC,MAAQP,EAC5BQ,QAAQC,IAAI,WACZZ,EAAQa,KAAK,KACbF,QAAQC,IAAI,UACZD,QAAQC,IAAIZ,KAMR,kEACA,yBAAKc,UAAU,cACb,2BACEC,KAAK,QACLC,SApBW,SAACV,GACpBF,EAAcE,EAAMW,OAAOC,QAoBnBA,MAAOf,EACPW,UAAU,eACVK,UAAQ,KAGZ,2BAAOJ,KAAK,SAASG,MAAM,WAAWJ,UAAU,uB,OC/BlDM,EAAW,uCAAG,gCAAAC,EAAA,sEACFC,MAAM,GAAD,OAHN,UAGM,cADH,cACdC,EADc,gBAEQA,EAAIC,OAFZ,cAEZC,EAFY,gBAINH,MAAM,GAAD,OANF,UAME,gCACoBd,OAAOC,aAAaC,QALvC,cAIlBa,EAJkB,iBAOaA,EAAIC,OAPjB,eAOdE,EAPc,OAQlBA,EAAqB,IAAIC,IACvBD,EAAmBE,KAAI,SAACC,GAAD,OAAaA,EAAQC,SAT5B,kBAYXL,EAAYG,KAAI,SAACC,GAAD,mBAAC,eACnBA,GADkB,IAErBE,WAAYL,EAAmBM,IAAIH,EAAQC,YAd3B,4CAAH,qDAkBXG,EAAU,uCAAG,WAAOH,EAAMI,EAAKC,GAAlB,eAAAd,EAAA,sEACDC,MAAM,GAAD,OArBN,UAqBM,aAAyB,CAC5Cc,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEV,OAAMI,UAJd,WACbX,EADa,QAORkB,GAPQ,gCAQHlB,EAAIC,OARD,cAQfD,EARe,yBASRmB,QAAQC,OAAOpB,EAAIqB,UATX,WAYbT,EAZa,kCAaTU,EAAUf,GAbD,4CAAH,0DAiBVe,EAAS,uCAAG,WAAOf,GAAP,SAAAT,EAAA,sEACVC,MAAM,GAAD,OAtCI,UAsCJ,cAA0B,CACnCc,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEV,OAAMpB,MAAOF,OAAOC,aAAaC,UAJ1C,2CAAH,sDAQToC,EAAW,uCAAG,WAAOhB,GAAP,SAAAT,EAAA,sEACZC,MAAM,GAAD,OA9CI,UA8CJ,gBAA4B,CACrCc,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEV,OAAMpB,MAAOF,OAAOC,aAAaC,UAJxC,2CAAH,sDCsDFqC,EA9FI,WACjB,IAAIjB,EAAMI,EAAKW,EADQ,EAEG3C,mBAAS,IAFZ,mBAEhB8C,EAFgB,KAETC,EAFS,OAGO/C,oBAAS,GAHhB,mBAGhBgD,EAHgB,KAGPC,EAHO,KAIjBnD,EAAUC,cACVmD,EAAWC,mBAmBXC,EAAY,uCAAG,WAAOhD,GAAP,SAAAe,EAAA,6DACnBf,EAAMC,iBADa,SAGjB4C,GAAW,GACXxC,QAAQC,IAAIkB,EAAMI,EAAKW,GAJN,SAKXZ,EAAWH,EAAMI,IAAOW,GALb,OAMjB7C,EAAQa,KAAK,KACbsC,GAAW,GAPM,kDASjBA,GAAW,GACXF,EAAS,EAAD,IAVS,0DAAH,sDAclB,OACE,6BACGD,GAAS,yBAAKlC,UAAU,sBAAsBkC,GAC/C,kBAAC,IAAD,CAAMO,GAAG,KACP,0BAAMzC,UAAU,4BADlB,oBAIA,0BAAMT,SAAUiD,EAAcxC,UAAU,QACtC,yBAAKA,UAAU,cACb,2BAAO0C,QAAQ,eAAf,uBACA,2BACEC,GAAG,cACH1C,KAAK,OACLC,SA7Ce,SAACV,GACxBwB,EAAOxB,EAAMW,OAAOC,OA6CZJ,UAAU,eACVK,UAAQ,KAGZ,yBAAKL,UAAU,cACb,2BAAO0C,QAAQ,cAAf,sBACA,2BACEC,GAAG,aACH1C,KAAK,MACL2C,QAAQ,cACR1C,SArDc,SAACV,GACvB4B,EAAM5B,EAAMW,OAAOC,MACnBP,QAAQC,IAAIwC,EAASO,QAAQC,SAASC,iBAClCT,EAASO,QAAQC,SAASC,gBAC5BT,EAASO,QAAQG,kBACf,uDAGFV,EAASO,QAAQG,kBAAkB,KA8C7BhD,UAAU,eACViD,IAAKX,EACLjC,UAAQ,KAGZ,yBAAKL,UAAU,cACb,2BACE2C,GAAG,mBACH1C,KAAK,WACLC,SApDoB,SAACV,GAC7BuC,EAAYvC,EAAMW,OAAO+C,SAoDjBlD,UAAU,qBAEZ,2BAAO0C,QAAQ,mBAAmB1C,UAAU,oBAA5C,6BAIF,4BAAQC,KAAK,SAASD,UAAU,mBAAhC,MAEGoC,GACC,0BACEpC,UAAU,wCACVmD,KAAK,SACLC,cAAY,aChD1B,IAAMC,EAAO,SAAC,GAAiB,EAAfC,SAAgB,IAAD,EACuBlE,oBAAS,GADhC,mBACtBmE,EADsB,KACFC,EADE,OAECpE,mBAAS,IAFV,mBAEtBqE,EAFsB,KAEbC,EAFa,OAGCtE,oBAAS,GAHV,mBAGtBgD,EAHsB,KAGbC,EAHa,OAImBjD,mBAAS,IAJ5B,mBAItBuE,EAJsB,KAIJC,EAJI,OAKHxE,mBAAS,IALN,mBAKtB8C,EALsB,KAKfC,EALe,KAOvBjD,EAAUC,cAEhB0E,qBAAU,YACW,uCAAG,4BAAAtD,EAAA,+EAEGD,IAFH,OAEdwD,EAFc,OAGlBJ,EAAWI,GACXzB,GAAW,GACXxC,QAAQC,IAAIgE,GALM,gDAOlB3B,EAAS,KAAI4B,YACb1B,GAAW,GARO,yDAAH,qDAYnB2B,KACC,IAqCH,OACE,6BACE,sCACWtE,OAAOC,aAAaC,MAD/B,IAEE,4BAAQI,UAAU,2BAA2BiE,QAT9B,WACnBvE,OAAOC,aAAauE,QACpBhF,EAAQa,KAAK,YAOT,WAKDmC,GAAS,yBAAKlC,UAAU,sBAAsBkC,GAC9CE,EACC,yBAAKpC,UAAU,eACb,yBAAKA,UAAU,iBAAiBmD,KAAK,UACnC,0BAAMnD,UAAU,WAAhB,gBAIJ,2BAAOA,UAAU,wDACf,iCACE,0BAAMA,UAAU,QAAhB,iCACA,2BACEC,KAAK,WACLe,KAAK,mBACL2B,GAAG,mBACHzC,SA3DS,SAACV,GACpBgE,EAAsBhE,EAAMW,OAAO+C,SACnCrD,QAAQC,IAAIN,EAAMW,OAAO+C,aA4DnB,+BACGO,EAAQ3C,KAAI,SAACqD,GAAD,OACX,qCACKZ,GAAsBY,EAAKlD,aAC3BsC,IACD,wBAAIa,IAAKD,EAAKnD,MACZ,wBAAIhB,UAAU,gCACXmE,EAAKnD,MAER,wBAAIhB,UAAU,gBAAgBmE,EAAK/C,KACnC,wBACEpB,UAAS,uBACPmE,EAAKE,OAAS,eAAiB,gBAGhCF,EAAKE,OAAS,KAAO,OACtB,0BACErE,UAAS,2BACPmE,EAAKE,OAAS,KAAO,WAI3B,wBAAIrE,UAAU,gBACZ,4BACEiE,SAjFIK,EAiFsBH,EAAKlD,WAjFAD,EAiFYmD,EAAKnD,KAjF7C,sBAAqC,sBAAAT,EAAA,yDAC5DV,QAAQC,IAAIwE,EAA2BtD,GACvC4C,EAAoB5C,GAFwC,UAItDsD,EAJsD,gCAKlDtC,EAAYhB,GALsC,+CAOlDe,EAAUf,GAPwC,QAS1D0C,EACED,EAAQ3C,KAAI,SAACqD,GAAD,OACVA,EAAKnD,OAASA,EAAd,2BACSmD,GADT,IACelD,YAAaqD,IACxBH,MAGRP,EAAoB,IACpBzB,EAAS,IAjBiD,kDAmB1DyB,EAAoB,IACpBzB,EAAS,EAAD,IACRtC,QAAQ0E,KAAR,MArB0D,2DAkFxCvE,UAAS,uBACPmE,EAAKlD,WAAa,eAAiB,cAGpCkD,EAAKlD,WAAa,cAAgB,YAClC0C,IAAqBQ,EAAKnD,MACzB,0BACEhB,UAAU,wCACVmD,KAAK,SACLC,cAAY,SAEb,QA7FA,IAACkB,EAA2BtD,OAuGjD,kBAAC,IAAD,CAAMyB,GAAG,gBAAT,qBAIS+B,EA1Kf,WAME,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW1F,GACpC,kBAAC,EAAD,OAEF,kBAAC,IAAD,CACEwF,OAAK,EACLC,KAAK,eACLE,OAAQ,kBACNlF,OAAOC,aAAaC,MAClB,kBAAC,EAAD,MAEA,kBAAC,IAAD,CACE6C,GAAI,CAAEiC,KAAM,SAAUG,MAAO,CAAEC,KAAM,sBAK7C,kBAAC,IAAD,CACEF,OAAQ,kBACNlF,OAAOC,aAAaC,MAAQ,kBAAC,EAAD,MAAW,kBAAC,IAAD,CAAU6C,GAAG,gBCvB1CsC,QACW,cAA7BrF,OAAO4D,SAAS0B,UAEe,UAA7BtF,OAAO4D,SAAS0B,UAEhBtF,OAAO4D,SAAS0B,SAASC,MACvB,2DCXNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1D,GACLrC,QAAQqC,MAAMA,EAAMJ,c","file":"static/js/main.369f8aef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Login = () => {\n  const history = useHistory();\n  let [emailInput, setEmailInput] = useState(\"\");\n\n  const handleChange = (event) => {\n    setEmailInput(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    window.localStorage.email = emailInput;\n    console.log(\"pushing\");\n    history.push(\"/\");\n    console.log(\"pushed\");\n    console.log(history);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <p>Please enter your email to continue</p>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            onChange={handleChange}\n            value={emailInput}\n            className=\"form-control\"\n            required\n          />\n        </div>\n        <input type=\"submit\" value=\"Continue\" className=\"btn btn-primary\" />\n      </form>\n    </>\n  );\n};\n\nexport default Login;\n","const BASE_URL = \"/api/v1\";\n\nconst getServices = async () => {\n  let res = await fetch(`${BASE_URL}/services`);\n  const allServices = await res.json();\n\n  res = await fetch(\n    `${BASE_URL}/services?subscriber=${window.localStorage.email}`\n  );\n  let subscribedServices = await res.json();\n  subscribedServices = new Set(\n    subscribedServices.map((service) => service.name)\n  );\n\n  return allServices.map((service) => ({\n    ...service,\n    subscribed: subscribedServices.has(service.name),\n  }));\n};\n\nconst addService = async (name, url, toSubscribe) => {\n  let res = await fetch(`${BASE_URL}/services`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ name, url }),\n  });\n\n  if (!res.ok) {\n    res = await res.json();\n    return Promise.reject(res.message);\n  }\n\n  if (toSubscribe) {\n    await subscribe(name);\n  }\n};\n\nconst subscribe = async (name) => {\n  await fetch(`${BASE_URL}/subscribe`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ name, email: window.localStorage.email }),\n  });\n};\n\nconst unsubscribe = async (name) => {\n  await fetch(`${BASE_URL}/unsubscribe`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ name, email: window.localStorage.email }),\n  });\n};\n\nexport { getServices, subscribe, unsubscribe, addService };\n","import React, { useState, useRef } from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\n\nimport { addService } from \"./services\";\n\nconst NewService = () => {\n  let name, url, subscribe;\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const urlInput = useRef();\n  const handleNameChange = (event) => {\n    name = event.target.value;\n  };\n  const handleUrlChange = (event) => {\n    url = event.target.value;\n    console.log(urlInput.current.validity.patternMismatch);\n    if (urlInput.current.validity.patternMismatch) {\n      urlInput.current.setCustomValidity(\n        \"Enter a valid URL starting with http:// or https://\"\n      );\n    } else {\n      urlInput.current.setCustomValidity(\"\");\n    }\n  };\n  const handleSubscribeChange = (event) => {\n    subscribe = event.target.checked;\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      setLoading(true);\n      console.log(name, url, subscribe);\n      await addService(name, url, !!subscribe);\n      history.push(\"/\");\n      setLoading(false);\n    } catch (err) {\n      setLoading(false);\n      setError(err);\n    }\n  };\n\n  return (\n    <div>\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n      <Link to=\"/\">\n        <span className=\"fa fa-chevron-left mr-2\" />\n        Back to services\n      </Link>\n      <form onSubmit={handleSubmit} className=\"mt-3\">\n        <div className=\"form-group\">\n          <label htmlFor=\"serviceName\">Name of the service</label>\n          <input\n            id=\"serviceName\"\n            type=\"text\"\n            onChange={handleNameChange}\n            className=\"form-control\"\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"serviceUrl\">Url of the service</label>\n          <input\n            id=\"serviceUrl\"\n            type=\"url\"\n            pattern=\"https?://.+\"\n            onChange={handleUrlChange}\n            className=\"form-control\"\n            ref={urlInput}\n            required\n          />\n        </div>\n        <div className=\"form-check\">\n          <input\n            id=\"serviceSubscribe\"\n            type=\"checkbox\"\n            onChange={handleSubscribeChange}\n            className=\"form-check-input\"\n          />\n          <label htmlFor=\"serviceSubscribe\" className=\"form-check-label\">\n            Subscribe to the service\n          </label>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Add\n          {loading && (\n            <span\n              className=\"spinner-border spinner-border-sm ml-2\"\n              role=\"status\"\n              aria-hidden=\"true\"\n            />\n          )}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default NewService;\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Login from \"./Login\";\nimport NewService from \"./NewService\";\nimport { Switch, Route, Redirect, Link, useHistory } from \"react-router-dom\";\nimport { getServices, subscribe, unsubscribe } from \"./services\";\n\nfunction App() {\n  /*\n  if (!window.localStorage.email) {\n    return <Login />;\n  }\n  */\n  return (\n    <Switch>\n      <Route exact path=\"/login\" component={Login}>\n        <Login />\n      </Route>\n      <Route\n        exact\n        path=\"/new-service\"\n        render={() =>\n          window.localStorage.email ? (\n            <NewService />\n          ) : (\n            <Redirect\n              to={{ path: \"/login\", state: { from: \"/new-service\" } }}\n            />\n          )\n        }\n      ></Route>\n      <Route\n        render={() =>\n          window.localStorage.email ? <Main /> : <Redirect to=\"/login\" />\n        }\n      ></Route>\n    </Switch>\n  );\n}\n\nconst Main = ({ location }) => {\n  const [showOnlySubscribed, setShowOnlySubscribed] = useState(false);\n  const [allData, setAllData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [subscribeLoading, setSubscribeLoading] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const fetchServices = async () => {\n      try {\n        let services = await getServices();\n        setAllData(services);\n        setLoading(false);\n        console.log(services);\n      } catch (err) {\n        setError(err.toString());\n        setLoading(false);\n      }\n    };\n\n    fetchServices();\n  }, []);\n\n  const handleChange = (event) => {\n    setShowOnlySubscribed(event.target.checked);\n    console.log(event.target.checked);\n  };\n\n  const handleSubscribed = (currentSubscriptionStatus, name) => async () => {\n    console.log(currentSubscriptionStatus, name);\n    setSubscribeLoading(name);\n    try {\n      if (currentSubscriptionStatus) {\n        await unsubscribe(name);\n      } else {\n        await subscribe(name);\n      }\n      setAllData(\n        allData.map((data) =>\n          data.name === name\n            ? { ...data, subscribed: !currentSubscriptionStatus }\n            : data\n        )\n      );\n      setSubscribeLoading(\"\");\n      setError(\"\");\n    } catch (err) {\n      setSubscribeLoading(\"\");\n      setError(err);\n      console.info(err);\n    }\n  };\n\n  const handleLogout = () => {\n    window.localStorage.clear();\n    history.push(\"/login\");\n  };\n\n  return (\n    <div>\n      <p>\n        Welcome {window.localStorage.email}!\n        <button className=\"btn btn-link text-danger\" onClick={handleLogout}>\n          Logout\n        </button>\n      </p>\n\n      {error && <div className=\"alert alert-danger\">{error}</div>}\n      {loading ? (\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      ) : (\n        <table className=\"card px-3 shadow rounded my-3 table table-responsive\">\n          <caption>\n            <span className=\"mr-2\">Show only subscribed services</span>\n            <input\n              type=\"checkbox\"\n              name=\"serviceDisplayed\"\n              id=\"serviceDisplayed\"\n              onChange={handleChange}\n            />\n          </caption>\n          <tbody>\n            {allData.map((data) => (\n              <>\n                {((showOnlySubscribed && data.subscribed) ||\n                  !showOnlySubscribed) && (\n                  <tr key={data.name}>\n                    <td className=\"align-middle text-capitalize\">\n                      {data.name}\n                    </td>\n                    <td className=\"align-middle\">{data.url}</td>\n                    <td\n                      className={`align-middle ${\n                        data.status ? \"text-success\" : \"text-danger\"\n                      }`}\n                    >\n                      {data.status ? \"Up\" : \"Down\"}\n                      <span\n                        className={`ml-3 fa fa-arrow-${\n                          data.status ? \"up\" : \"down\"\n                        }`}\n                      />\n                    </td>\n                    <td className=\"align-middle\">\n                      <button\n                        onClick={handleSubscribed(data.subscribed, data.name)}\n                        className={`btn btn-link ${\n                          data.subscribed ? \"text-primary\" : \"text-info\"\n                        }`}\n                      >\n                        {data.subscribed ? \"Unsubscribe\" : \"Subscribe\"}\n                        {subscribeLoading === data.name && (\n                          <span\n                            className=\"spinner-border spinner-border-sm ml-2\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                          />\n                        )}{\" \"}\n                      </button>\n                    </td>\n                  </tr>\n                )}\n              </>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <Link to=\"/new-service\">Add new service</Link>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}